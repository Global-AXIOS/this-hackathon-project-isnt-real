we will writew   One of us had very little experience in C++. This project helped them learn more about it. Another one of us knew nothing about git or hackathons, so they were in the same boat. The last member helped us come up with the inspiration for many of the results we have. Lots.  A noticeable relationship between the square and triangular sequences approaching a ratio of 2. we will writew   One of us had very little experience in C++. This project helped them learn more about it. Another one of us knew nothing about git or hackathons, so they were in the same boat. The last member helped us come up with the inspiration for many of the results we have. Lots.  A noticeable relationship between the square and triangular sequences approaching a ratio of 2.     How to work in a team.  How to use Github  A lot about building a full stack platformHow to interface with GCP, including sheets and ML APIsHow to operate a crypto-currency    We learned how to come up with back-up options when the original plan doesn't work. Majority of us were beginners in Computer Science, so we learnt how to connect the hardware with the software practically. We learned how to use html, and how to incorporate css and javascript into the html.  We learned how to use XCode     How to use UnityLimitations of using new technologies such as ARIntegrating different APIs into one project Communication across different disciplines How to come up with a minimum viable product Hardware coding and how HackHolyoke works in general ('cause this is our first time for most of us) Learnt a lot about openCV library. We learned what it means to work with people of different backgrounds, with diverse skill sets. While reading on the scale that this can affect people, we as a team would thrive to find such problems in society, and use the latest technologies to solve them. We learned how difficult it can be to tune parameters of a machine learning model, and what goes into building a technology that can impact multiple domains, right from healthcare, to autonomous cars, robotics and much more.       As a group, we learned React Native, as none of us had used the technology before in a project. Additionally, we grew together as a group and learned how to work very well with each other.  We figured out how to use "intents", "slots",  and "utterances" in the Amazon Alexa. We also learned about how to work with the Alexa's phrasing. This is the first hackathon project that three of the four of us have made, too.  We learned a tremendous amount from creating the pipeline starting at listening to audio to obtaining a clean parsed string output.  In general, we both learned a lot about Python Libraries and using Kivy. We also learned how to debug errors related to installing different libraries. We very well realized that each library is not accessible each very and therefore must be careful about using libraries and the python version before starting the project.  We learnt to hone our skills like perseverance, passion, leadership, teamwork, delegation of responsibility. To let our creativity flow and and work well under pressure. We understood the importance of adaptability in life and how to change things on the spot when needed. We learnt to play to our strengths individually and come together and create something beautiful.We also attended a Unity crash course and learned the basics about game design using C#, which was something none of us had really done before. Nothing    Prototyping is fun, although we faced many problems. We’ve applied voice technology, Machine Learning, and Natural Language Processing/Understanding (NLP/NLU) in this 24-hour project.  How to apply and combine the knowledge of Python that we have learned into a  complicated program;The ability to innovate on the things we have already learned;The spirit of teamwork: cooperation is crucial to acheive goals;The improtance of being persevered and never giving up! This was everyone's first Hackathon! We learned what to expect, what we should learn, and how to work flexibly and as a group.  WIP  Working in a one team  test                How to reverse engineer something without going insane (barely).   k We learned  a manual procedure to produce a product, psychological environmental theories and persuasive theory to encourage user usage, and UI/UX design                    We learned the importance of strings and if-else loops.       I bought Alexa hardware to learn about, but nothing about develop yet. Only Ideas. Sometimes have a good idea is more difficult than developing. So the idea is done, now is only pay for someone to develop.       Google Dialogflow         Skill development is an amazing learning process, and I learned a ton with this project. While I had experience with some of these technologies before, I took steps to learn and include more technologies whenever I got the chance. For example, as part of this project I learned Typescript and built the entire skill using it. Being my first time using Typescript, it took at bit of studying up, but I think it paid off in the end and my skill is far more maintainable that it would have been without it. I also learned the importance of user testing. As part of the process, I recruited people that I knew to act as beta testers and play through the game for a few weeks before the release. This really allowed me to tweak the difficulty and gameplay and find a level where I think people will gain the most possible enjoyment. As I went through a couple iterations of this I found that each and every piece of feedback I acted on had an immediate effect on the next group of people I had try the game. It's definitely a process that I will continue doing on future projects.   Capabilities of digital camerasHow to use and implement Filestack & it's API The simplest things can take so long to build, and break so easily. How to use the Filestack API in a very short period of time.Built Withcssfilestackapigoogle-mapshtmljavascriptmeteor.jsmongodbnode.js      Submitted to    DeveloperWeek Austin 2019 Hackathon    Created by  Zachariah Col   I have gained a lot of knowledge on workflows for story-boarded adventure games and am hoping to create many future titles but with completely custom questions and multi-level scenarios.  Involvement of other stakeholders is key in combating wildlife crime.         The camera API was easy to use, pretty much plug and play. Shoutout to Filestack because the workflow idea is really cool; it makes automating image transformations really easy.    How to deploy React to GitHub pages.How to work with an Organization on GitHub (forking and Pull Requests).      It was hard to tell if the collected realtime video data from our web camera is accurate enough to say the user has dry-eye symptom or blue-light damage. However, we were happy with being able to design an architecture that can collect peoples behaviors and visualize it and relate it to some possible symptoms.    I learned about the subtle adjustment of the game using GPS. I learned how to loop through a map's keys and its associated values. I also learned how to upload files to GitHub.          Alexa Skill Development I had to learn lambda, Alexa and node JS for this game.   Work for nature. Should we get our motivation for work for prize money? What about the things we get from nature?. Those priceless gifts are much more than any prize to me. I faced many issues but since we are from India. Please sponsor us. We want to save wildlife by coding. It's our earnest request to please help us sponsoring our expenses.Built Withcss3html5javascriptjsonpython-package-index      Submitted to    Keeping Wildlife in the Wild - Hong Kong Zoohackathon 2019    Created by  Abhik ChakrabortyHey I am a developer . I live in India but I have my relatives living in New York. Hence I applied here  NA When pushing boundaries the learning curve is steep. Apart from the technical hurdles, starting a company, dealing with investors and raising capital has been the 'new' challenges.  How to run a full bitcoin node with lightning on top. I learned how to create a wallet, fund it, and open a channel on the main network.    Create a tailored, perfectly-fit and powerful solution that integrate and combine different Progress products and platforms. I learned a lot in terms of App Evo strategy, and a bit of 3rd party systems and database, VM, UI/UX, DataDirect, Kinvey, NativeScript, ...  a lot: realtime communication, working in teams, procrastination and other helpful stuff Training on demand is complicated. In short- "Customer is God". Making things at the hand of their tips and increasing the ease of using our applications is most important. For us to keep in mind that developers who will be working on our project after some time can feel comfortable using our code and so I used Quarkus for making automatic preview of code. Especially Kafka's extensions are just awesome as we can easily add them in just a single line of command   Don't underestimate who long will it take to develop even the MVP of the game.Check the invocation name before publishing the skill. I've used the 'empire builder' name and then realized that there is an existing skill with the same name. So I've removed the live skill and submitted another one with the new name.         Most of our group learned more about HTML and CSS, while also being able to edit a database using Google's AppEngine. Advanced methods in React Framework (React.JS, Javascript, JSX)MapBox API (used by Facebook and Snapchat) QR Code API, PG&E SDK APIPhotoshop for our icons, logo, etcGitHub use for collaborating in developmentFirebase Database: Back End to retrieve and store dataStrengthened our communication, time management, and teamwork skills.   There are many reasons that someone might not ask for the help that they need. Although it's easy for me to pull up a list of available resources, it's harder for someone without my privilege  to do so. This project really taught me how to look at the world through the lens of someone who isn't geared towards technology.  Being freshmen with very little coding experience, this hackathon proved to be a great learning experience. It is the second web application we have ever made and we learned a lot about APIs, datasets, and front-end development in general. We even had to learn some JavaScript, which we had no prior experience with. We learned to use Node.js, Express, CSS, and dive into the implementation of databases.   Design Process and iterative methodology Necessity to always keep the user in mind-- perhaps expanding our reachScope-- how will this application work large scale (with several partnerships, not just St. Anthony's, and with many many more users?)Presentation-- how do we entice the audience with a story and get to the point?What's next?Test it past the BetaPartner with more organizationsSocial aspectRelational journey with one-to-one partnership Built Withadobexdexpo.iogoogle-drivegoogleslidesreact-nativeslackuxdesignTry it outgithub.comtestflight.apple.comxd.adobe.comdocs.google.com      Submitted to    Girls in Tech Hacking for Humanity 2019    Created by  I worked on tactics to tackle marketing and scale. I also helped with the slides and doing user research.Kristee SongI worked as a project manager for team Kizuna, and did a significant amount of research and ideation for our project. Aurélie RoubinowitzI contributed to the user research and scoping of the problem space, and designed the wireframes and made a clickable prototype on Adobe XD.Hannah PhamBuilt a demo version of our mobile app; it was my first time doing mobile development and using React NativeLinden ChiuI worked on UX Research and absolutely loved it! My team is amazing. Go team Kizuna!Nina Mesina    Python is hard to use with google maps offline but it can be done   We learned how to make a simple game engine in Java. A lot more about Java and speech to text along with how to use APIs. Just how difficult it can be to make a large app, design can become difficult in terms of appeal and aesthetics. We have many great ideas we want to implement into the app! The group learned the parts of the languages in this project that we didn't understand very much before.  In addition, we learned to connect the front-end and back-end, and to use Javascript as the main tool for website processes.  We learned how intuitive many data formats are, and how DOM works. Coming into this project as a Flask novice, I had absolutely no experience with anything related to the Twilio API, and minimal experience with Ngrok servers and design. However, I managed to bridge this gap by constantly pushing myself to learn more about C, poring over documentation, and seeking help when needed on StackOverflow and Google. Ultimately, I needed to think and rethink the overall coding process, and finding that common ground and challenging myself to truly understand code instead of haphazardly copying it from forum pages really allowed me to progress. I was also able to experiment with new technologies such as Cloud Firestore, SQLite3, Ngrok, and others.  I learned how to work with a MongoDB Atlas database and the collections. I learned how to connect Google Cloud Platform to MongoDB, and how to connect MongoDB to a Java application for the movement of data. I learned how to use Google's Cloud Vision API.  The main thing we learned was how to use many different APIs and integrate them well within our program. Early application architecture was also necessary. We also learned some basic JavaScript and how to integrate it well with Java. We have learned how to work collaboratively with each other. By presenting different ideas for this project, we have been able to discuss the simulations for each outcome within the project so that we could build something successful.   Learned how to work with mapping data.Learned the fundamentals of augmented reality app development. Some of us had never coded in HTML/Javascript before, so it was a completely new experience for us. In addition, we learned the importance of communicating with each other about pushing and pulling to git. What's next?We want to implement a user login system to keep track of each user’s donations. We want to increase a bigger database of charities and we want to be able to spread it to far more different online platforms. We also hope to improve the user interface to make it more user friendly and cleaner-looking.Built Withchromecsshtml5javascriptTry it outgithub.com      Submitted to    HackDuke: Code for Good 2019Winner                Coding it Forward Winner: Nonprofits Track                  Created by  I worked on web parsing to identify the prices of products and types of products. I also worked on linking buttons to make windows pop up and close.Alex ZhuangI built the progress bar page to show the overall progress made for total donations for each track. I also worked on the design for the extension window and progress window.geshnaI worked on setting up the Chrome.storage.sync API to store the total donated values for each charity and add the donation from each user.Annie WangI designed the logo for the PenniesForGood chrome extension. I also built the charity selection page, the thank you page and the charity category selection based off the product bought.Raymond LinI built the chrome extension page. helped with the progressbar, brainstormed the idea, assisted with the js implementation of various parts.Andrew Wu Limitations and benefits of firebase.How to create an app using Android Studio.Java We learned the updated APIs for Firebase. None of our team members had significant experience with web frameworks.  We gained valuable experience with jQuery, Flask, and REST APIs while implementing the demo web application.  We learned about the possibilities of blockchain, how a blockchain is coded and created, and how the blockchain interacts with external resources ( such as the code behind a transaction). We learned that making a functional website containing any form of API's could be very challenging.However, we also learned that we could solve coding problems if we ask for help when needed and also by putting in extra hours in coding.    We learned how to use certain apis like twilio, accuweather, and hosting apps, and analytics and prediction modeling.  about memory retention through sound, finance advocacy  Basic skills in data mining and data analysis.Crawling data based on the “Hefeng Weather” API;Analyzing the weather parameters, and build the bar graph. Build our own Clothes Library matching with the weather.    Give yourself more than 10 minutes to deploy to AWS, and IntelliJ doesn't work on Mac all the time :). Seriously, though, learning how to write discriminators in JS to sort cards on the client side was very enriching. We all learned about the value of communication within a team. Although each one of us had our own tasks to work on, we all needed each other and work together in order to actually develop the application. We used a lot of delegation and constant communication to get help from others and solve problems together. None of us had any particular front or back-end experience and we learned a lot about working outside what we know. In terms of technical skills, we all picked up a new application of languages we knew, whether it was Flask for Python or SwiftUI. These skills, along with the communication skills we learned, are truly invaluable.    From this event, we learned how to receive data from an API using the Unirest library, and we also learned how to receive individual objects and then values from the JSONNode Objects that the API would return to us. We learned how to use Github, and we also learned vital teamwork skills that will be extremely valuable in any future career path. The thought process and consideration that must go into creating a user-centered product. We also learned new features of HTML for web design.  Learnt using Lamp stack.Building models using deep learning.Twilio API for alert SMS. We learned about shaders, ARFundation Image-Tracking We learned a lot about R, HTML, .csv files, pandas, Python, Github and most importantly, how to work as a team!What’s next for On The MoveIdeally, we would love to have more features like 3-D visualizations and more datasets. Given more time, we would add a feature that includes a ranking of the best counties based on all of the features we have.Built Withcssdatahtmljavascriptjupyter-notebooknode.jspythonrTry it outgithub.com      Submitted to    HackDuke: Code for Good 2019    Created by  I worked on front-end. Using HTML and CSS I helped design an interactive website that linked with our web app. Alvin BaoI worked on the front-end. Using HTML and CSS, I designed a website that holds the data visualizations and other information on the web app. Stephanie YaoI built the structure of the web app using Shiny in R to create the auto-generating visualizationsKeshav ShenoyI worked on gathering and parsing data, along with finding insights. I mainly worked with data analytics in Python.Ayush GoyalI worked on handling and parsing sets of data to allow data visualizations to be created. I mainly worked with python and its libraries for data analysis.Richik Ray Considerations designed around the interests of the homeless and donors is crucial to attracting the target demographic to use our set of web and mobile tools  I learned about rapid- prototyping in trying to develop a simulation in such a small time frame.  Django We learned how to integrate the cross platform React Native framework with backend APIs such that there is a seemless lifecycle from client to server communication. We learned how to extract data from an API, create animations, and work with data files.  We learned that it's very important to define the scope of the functionality and clearly understand the requirements of customers.  This project requires clear thoughts about what the team should be doing as well as what each self is doing; instead of a broad knowledge of computer science, it requires every team member focuses on each individual's expertise.Regarding getting familiar with Salesforce, we think that is the most difficult process during the past 24 hours of development. Long story short, since Salesforce is well-known robust software technology, there are too many things we have to cover first before we put into practice.Another thing that we want to address is the process of development makes me benefit a lot, for example, teamwork, building a system from scratches.   We learned a lot about using REST APIs to develop an application and we learned how to better use React and Reactstrap to deliver a simple website. This entire experience was something new for us as we have never really worked with any of these technologies before. After this experience we are confident in saying that we are at least experience with these technologies.     We learned that it is not that difficult to launch functional applications with the help of resources such as Google App Engine!  Everything Team workVarious visualization requirements How to have fun in tough times I learned a ton. I learned about forms, DOM event listeners, retirement, components, databases, Git, and subdomains.  Improved front end skills with React.   How BTLE devices communicateBuilt Withandroid-studiocatalystgcpiosjavakotlinmongodbnode.jsswiftTry it outdocs.google.com      Submitted to    HackDuke: Code for Good 2019    Created by  John GarrettSam Perlmutter  I need a teammate! there are potentially hugely transformative ways that DeFI can help the planetlooking at a problem in the real world can lead to interesting architectural ideas which possibly have applicability well beyond our immediate use case   That sleep is very important React Transactions API   I learnt privacy in the blockchain and how permissioned blockchains work.   We learned about different web frameworks that we could learn in the future such as Ruby on Rails, some members on our team used React for the first time. How to build a blockchain. The promise of the future.  there is so much change in ths industry that what doc is out there is pretty outdated We learned how to turn a kernel into a broader idea and then simplify the solution with a big emphasis on user experience.  Cubimal chick A lot about the Aave protocol and interacting with decentralized exchanges and also the concept of a flash loan and how we can use it in de-fi.   Databases, graphql and more databases - Application design process - from idea to prototype - using tools such as Whimsical and Figma (Corwin, Jon)-How to integrate a database into prototype (Mischa)-Collaborative product design  Work with languages you're familiar with. Learned about how Cosmos works and its flexibility. Learned about Oasis Labs' privacy features. A lot about L1 blockchains, Cosmos, Compound  Coding is hard. Staying awake is harder. As a team, we learned about the best way to send images between the front and back end of a web app as well as how to use a few of Google's API, including Google Maps and Google Geocoding API. We learned how to use MongoDB and Javascript, as well as a lot about emissions and the environment in general.  We learned how to integrate various platforms through the use of servers and back-end technology. We used a lot of new tools which many of us had little exposure to prior to this hackathon, including TensorFlow for the machine learning, HTML/CSS for front-end development, and creating a server, which none of us had really known much about before. We learned about the challenges which arise when training a machine model to accurately assess negative and positive thoughts through text message. We also learned how to use JSON files to send information between the mobile app and the server, as well as between the server and front-end website. Start integrating with your API as soon as possible to reduce potential for complication. How to use bootstrap to make a website look visually pleasing.  We learned to identify users by their Ethereum accounts and provide an interface to sign transactions.  We learned how to design and plan out an idea from scratch, how to use android studio and how to build a mobile application.  